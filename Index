<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Infographic: KPI แผนกคลังสินค้า</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Sarabun:wght@400;600;700&display=swap" rel="stylesheet">

    <style>
        body {
            font-family: 'Sarabun', sans-serif;
            background-image: url('https://www.sahapvc1980.com/images/banner/pharma_phamapack0436_1.webp'); /* Placeholder background image */
            background-size: cover; /* Cover the entire area */
            background-repeat: no-repeat; /* Do not repeat the image */
            background-attachment: fixed; /* Keep background fixed when scrolling */
            background-position: center center; /* Center the background image */
        }
        .chart-container {
            position: relative;
            width: 100%;
            max-width: 250px;
            height: 150px;
            max-height: 200px;
            margin: 0 auto;
        }
        /* New style for sparkline charts */
        .sparkline-container {
            position: relative;
            width: 100%;
            height: 80px; /* Increased height for more detail */
            margin-top: 10px;
        }
        .chart-container-line {
            position: relative;
            width: 100%;
            height: 250px;
            max-height: 300px;
            margin: 0 auto;
        }
        .modal-content {
            max-height: 80vh;
        }
        .kpi-value-lg {
            font-size: 4rem;
            line-height: 1;
        }
        .section-hidden {
            display: none;
        }
        /* Added subtle text shadow for better readability on translucent backgrounds */
        .text-shadow-subtle {
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);
        }
    </style>
</head>
<body class="text-white"> <!-- Main text color set to white for contrast on background image -->
    <!-- Loading Overlay -->
    <div id="loading-overlay" class="fixed inset-0 bg-sky-50 bg-opacity-75 flex items-center justify-center z-[100]">
        <div class="flex flex-col items-center">
            <div class="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-blue-500"></div>
            <p class="mt-4 text-gray-700 text-lg">กำลังโหลด...</p>
        </div>
    </div>

    <div class="container mx-auto p-4 sm:p-6 md:p-8">
        <header class="text-center mb-10">
            <h1 class="text-3xl sm:text-4xl md:text-5xl font-bold text-white">วัตถุประสงค์คุณภาพ (KPI)</h1> <!-- Header text white -->
            <p class="text-xl text-white mt-2">แผนกคลังสินค้า ประจำปี 2568</p> <!-- Header text white -->
            <div class="w-24 h-1 bg-teal-500 mx-auto mt-4 rounded"></div> <!-- Brighter header line -->
        </header>

        <!-- Navigation Menu -->
        <nav class="mb-8 flex justify-center space-x-6">
            <button id="nav-kpi-risk" class="text-lg font-semibold text-blue-900 hover:text-blue-900 transition-colors py-2 px-4 rounded-lg bg-blue-300 shadow-md">
                KPI & ความเสี่ยง
            </button>
            <button id="nav-combined-trend" class="text-lg font-semibold text-blue-700 hover:text-blue-900 transition-colors py-2 px-4 rounded-lg bg-blue-100 shadow-md">
                แนวโน้มรวม
            </button>
            <button id="nav-quiz" class="text-lg font-semibold text-blue-700 hover:text-blue-900 transition-colors py-2 px-4 rounded-lg bg-blue-100 shadow-md">
                ข้อสอบ
            </button>
            <button id="nav-document-forms" class="text-lg font-semibold text-blue-700 hover:text-blue-900 transition-colors py-2 px-4 rounded-lg bg-blue-100 shadow-md">
                แบบฟอร์มเอกสาร
            </button>
        </nav>

        <section id="kpi-risk-section">
            <div class="mb-6 flex justify-center items-center">
                <label for="month-select" class="mr-3 text-lg font-semibold text-white">เลือกเดือน:</label> <!-- Label text white -->
                <select id="month-select" class="p-2 border border-blue-300 rounded-lg shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors text-gray-800"> <!-- Select options text remains gray-800 for readability -->
                </select>
            </div>

            <main id="kpi-grid" class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-8">
            </main>

            <section class="mt-16">
                <h2 class="text-3xl sm:text-4xl font-bold text-white text-center mb-8">การประเมินความเสี่ยงและโอกาส</h2> <!-- Section title text white -->
                <p class="text-lg text-white text-center mb-10 max-w-3xl mx-auto"> <!-- Section description text white -->
                    ส่วนนี้แสดงการวิเคราะห์ความเสี่ยงและโอกาสที่สำคัญในแผนกคลังสินค้า โดยประเมินจากโอกาสที่จะเกิดขึ้นและผลกระทบ เพื่อให้เข้าใจถึงระดับความสำคัญและมาตรการที่จำเป็น
                </p>

                <div id="risk-opportunity-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12">
                </div>

                <div class="bg-white bg-opacity-75 rounded-xl shadow-lg p-6 mb-12"> <!-- Changed to bg-opacity-75 -->
                    <h3 class="text-2xl font-bold text-black mb-6 text-center text-shadow-subtle">สรุประดับความเสี่ยงและโอกาส</h3> <!-- Changed to text-black and added text-shadow-subtle -->
                    <div class="chart-container-line">
                        <canvas id="riskOpportunitySummaryChart"></canvas>
                    </div>
                    <p class="text-center text-gray-900 mt-4 text-shadow-subtle">แผนภูมิแสดงการกระจายของระดับความเสี่ยงและโอกาสที่ประเมินได้ (วางเมาส์บนแท่งเพื่อดูรายละเอียด)</p> <!-- Changed to text-gray-900 and added text-shadow-subtle -->
                </div>

                <div class="bg-white bg-opacity-75 rounded-xl shadow-lg p-6"> <!-- Changed to bg-opacity-75 -->
                    <h3 class="text-2xl font-bold text-black mb-6 text-center text-shadow-subtle">ตารางจัดลำดับความเสี่ยงและโอกาส</h3> <!-- Changed to text-black and added text-shadow-subtle -->
                    <div class="overflow-x-auto">
                        <table class="min-w-full bg-white bg-opacity-75 border border-gray-200 rounded-lg"> <!-- Changed to bg-opacity-75 -->
                            <thead>
                                <tr class="bg-blue-100 text-blue-800 uppercase text-sm leading-normal">
                                    <th class="py-3 px-6 text-left">ระดับคะแนน</th>
                                    <th class="py-3 px-6 text-left">ระดับความเสี่ยง และโอกาส</th>
                                    <th class="py-3 px-6 text-left">การดำเนินงาน</th>
                                </tr>
                            </thead>
                            <tbody class="text-gray-900 text-sm font-light text-shadow-subtle"> <!-- Changed to text-gray-900 and added text-shadow-subtle -->
                                <tr class="border-b border-gray-200 hover:bg-gray-100">
                                    <td class="py-3 px-6 text-left whitespace-nowrap">1-5</td>
                                    <td class="py-3 px-6 text-left">ต่ำ</td>
                                    <td class="py-3 px-6 text-left">ไม่ดำเนินการใดๆ</td>
                                </tr>
                                <tr class="border-b border-gray-200 hover:bg-gray-100">
                                    <td class="py-3 px-6 text-left whitespace-nowrap">6-10</td>
                                    <td class="py-3 px-6 text-left">ปานกลาง</td>
                                    <td class="py-3 px-6 text-left">เฝ้าระวัง และต้องนำมาทบทวนใหม่ในครั้งหน้า</td>
                                </tr>
                                <tr class="hover:bg-gray-100">
                                    <td class="py-3 px-6 text-left whitespace-nowrap">11-15</td>
                                    <td class="py-3 px-6 text-left">สูง</td>
                                    <td class="py-3 px-6 text-left">จัดทำแผนงาน (Action Plan)</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </section>
        </section>

        <!-- Combined Trend Section (New) -->
        <section id="combined-trend-section" class="mt-16 section-hidden">
            <h2 class="text-3xl sm:text-4xl font-bold text-white text-center mb-8">แนวโน้มรวมของ KPI ทั้งหมด</h2>
            <p class="text-lg text-white text-center mb-10 max-w-3xl mx-auto">
                แผนภูมิแสดงแนวโน้มรายเดือนของ KPI ทั้งหมด เพื่อการวิเคราะห์ภาพรวมและแนวโน้มในระยะยาว
            </p>
            <div class="bg-white bg-opacity-75 rounded-xl shadow-lg p-6 mb-8"> <!-- Added mb-8 for spacing -->
                <h3 class="text-2xl font-bold text-black mb-6 text-center text-shadow-subtle">แนวโน้ม KPI อื่นๆ</h3>
                <div class="chart-container-line h-[400px]">
                    <canvas id="combinedTrendChart"></canvas>
                </div>
            </div>

            <div class="bg-white bg-opacity-75 rounded-xl shadow-lg p-6">
                <h3 class="text-2xl font-bold text-black mb-6 text-center text-shadow-subtle">แนวโน้มข้อผิดพลาดในกระบวนการทำงาน</h3>
                <div class="chart-container-line h-[400px]">
                    <canvas id="processErrorsTrendChart"></canvas>
                </div>
            </div>
        </section>

        <!-- Quiz Section -->
        <section id="quiz-section" class="mt-16 section-hidden">
            <h2 class="text-3xl sm:text-4xl font-bold text-white text-center mb-8">แบบทดสอบสำหรับตำแหน่งต่างๆ</h2> <!-- Section title text white -->
            <p class="text-lg text-white text-center mb-10 max-w-3xl mx-auto"> <!-- Section description text white -->
                เลือกแบบทดสอบตามตำแหน่งที่คุณต้องการฝึกฝนความรู้ความเข้าใจ
            </p>

            <div class="space-y-12">
                <div class="bg-white bg-opacity-75 rounded-xl shadow-lg p-6 text-center"> <!-- Changed to bg-opacity-75 -->
                    <h3 class="text-2xl font-bold text-black mb-6 text-shadow-subtle">1. แบบทดสอบพนักงานเก็บสินค้าในไลน์ผลิต</h3> <!-- Changed to text-black and added text-shadow-subtle -->
                    <button class="quiz-button bg-blue-500 text-white font-semibold py-3 px-8 rounded-lg hover:bg-blue-600 transition-colors shadow-md" data-quiz-url="https://forms.gle/GjgDKJ7Pqi8vvpRE7">
                        ทำแบบทดสอบ
                    </button>
                </div>

                <div class="bg-white bg-opacity-75 rounded-xl shadow-lg p-6 text-center"> <!-- Changed to bg-opacity-75 -->
                    <h3 class="text-2xl font-bold text-black mb-6 text-shadow-subtle">2. แบบทดสอบพนักงานจัดเตรียมสินค้าส่งออก</h3> <!-- Changed to text-black and added text-shadow-subtle -->
                    <button class="quiz-button bg-blue-500 text-white font-semibold py-3 px-8 rounded-lg hover:bg-blue-600 transition-colors shadow-md" data-quiz-url="https://forms.gle/MwdmKPsZYuHBajU17">
                        ทำแบบทดสอบ
                    </button>
                </div>

                <div class="bg-white bg-opacity-75 rounded-xl shadow-lg p-6 text-center"> <!-- Changed to bg-opacity-75 -->
                    <h3 class="text-2xl font-bold text-black mb-6 text-shadow-subtle">3. แบบทดสอบพนักงานเบิกจ่ายวัสดุประกอบ</h3> <!-- Changed to text-black and added text-shadow-subtle -->
                    <button class="quiz-button bg-blue-500 text-white font-semibold py-3 px-8 rounded-lg hover:bg-blue-600 transition-colors shadow-md" data-quiz-url="https://forms.gle/3f9x5tjSKQ2ZgZj8A">
                        ทำแบบทดสอบ
                    </button>
                </div>
            </div>
        </section>

        <!-- Document Forms Section (New) -->
        <section id="document-forms-section" class="mt-16 section-hidden">
            <h2 class="text-3xl sm:text-4xl font-bold text-white text-center mb-8">แบบฟอร์มเอกสารในแผนก</h2> <!-- Section title text white -->
            <p class="text-lg text-white text-center mb-10 max-w-3xl mx-auto"> <!-- Section description text white -->
                ส่วนนี้จะรวบรวมแบบฟอร์มเอกสารที่สำคัญสำหรับการปฏิบัติงานในแผนกคลังสินค้า
            </p>

            <div class="space-y-6">
                <div class="bg-white bg-opacity-75 rounded-xl shadow-lg p-6 text-center"> <!-- Changed to bg-opacity-75 -->
                    <h3 class="text-2xl font-bold text-black mb-4 text-shadow-subtle">วัตถุประสงค์คุณภาพ (KPI) แผนกคลังสินค้า (saha p.v.c.1980)</h3> <!-- Changed to text-black and added text-shadow-subtle -->
                    <p class="text-gray-900 mb-4 text-shadow-subtle"> <!-- Changed to text-gray-900 and added text-shadow-subtle -->
                        (เอกสารนี้เป็น Google Sheet)
                    </p>
                    <a href="https://docs.google.com/spreadsheets/d/1a6DdbnbNaNLjXZg4MncuK9mwOWlrwTQizzngf27TgLg/edit?usp=sharing" target="_blank" class="inline-block bg-blue-500 text-white font-semibold py-2 px-6 rounded-lg hover:bg-blue-600 transition-colors shadow-md">
                        เปิด Google Sheet
                    </a>
                </div>

                <div class="bg-white bg-opacity-75 rounded-xl shadow-lg p-6 text-center"> <!-- Changed to bg-opacity-75 -->
                    <h3 class="text-2xl font-bold text-black mb-6 text-shadow-subtle">เพิ่มแบบฟอร์มเอกสารอื่นๆ</h3> <!-- Changed to text-black and added text-shadow-subtle -->
                    <p class="text-xl text-gray-900 mb-4 text-shadow-subtle"> <!-- Changed to text-gray-900 and added text-shadow-subtle -->
                        หากคุณต้องการเพิ่มแบบฟอร์มเอกสารอื่นๆ กรุณาอัปโหลดไฟล์ไปยัง Google Drive และทำตามขั้นตอนการรับลิงก์สำหรับแชร์
                    </p>
                    <p class="text-gray-900 mt-4 text-shadow-subtle"> <!-- Changed to text-gray-900 and added text-shadow-subtle -->
                        จากนั้นแจ้งชื่อแบบฟอร์มและ **ลิงก์ Google Drive** มาให้ผมได้เลยครับ ผมจะช่วยเพิ่มลงในหน้านี้ให้
                    </p>
                </div>
            </div>
        </section>
    </div>

    <div id="kpi-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4 hidden">
        <div class="bg-white rounded-xl shadow-2xl w-full max-w-2xl transform transition-all duration-300 scale-95 opacity-0">
            <div class="modal-content overflow-y-auto p-6">
                <div class="flex justify-between items-start mb-4">
                    <h2 id="modal-title" class="text-2xl font-bold text-black text-shadow-subtle"></h2> <!-- Changed to text-black and added text-shadow-subtle -->
                    <button id="modal-close-btn" class="text-gray-500 hover:text-gray-800 transition-colors">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                    </button>
                </div>
                <div id="modal-body" class="space-y-4 text-gray-900 text-shadow-subtle"> <!-- Changed to text-gray-900 and added text-shadow-subtle -->
                </div>
            </div>
        </div>
    </div>

    <div id="ro-modal" class="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4 hidden">
        <div class="bg-white rounded-xl shadow-2xl w-full max-w-2xl transform transition-all duration-300 scale-95 opacity-0">
            <div class="modal-content overflow-y-auto p-6">
                <div class="flex justify-between items-start mb-4">
                    <h2 id="ro-modal-title" class="text-2xl font-bold text-black text-shadow-subtle"></h2> <!-- Changed to text-black and added text-shadow-subtle -->
                    <button id="ro-modal-close-btn" class="text-gray-500 hover:text-gray-800 transition-colors">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                    </button>
                </div>
                <div id="ro-modal-body" class="space-y-4 text-gray-900 text-shadow-subtle"> <!-- Changed to text-gray-900 and added text-shadow-subtle -->
                </div>
            </div>
        </div>
    </div>

    <script type="module">
        // นำเข้าโมดูล Firebase ที่จำเป็น
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, setDoc, onSnapshot, collection } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        let db;
        let auth;
        let userId = 'anonymous'; // กำหนดค่าเริ่มต้นเป็น anonymous
        let kpiDataFromFirestore = []; // เก็บข้อมูล KPI ที่ดึงมาจาก Firestore
        let currentMonthIndex = 0; // ติดตามเดือนที่เลือกปัจจุบัน

        const monthNames = ['ม.ค.', 'ก.พ.', 'มี.ค.', 'เม.ย.', 'พ.ค.', 'มิ.ย.', 'ก.ค.', 'ส.ค.', 'ก.ย.', 'ต.ค.', 'พ.ย.', 'ธ.ค.'];

        // โครงสร้าง KPI เริ่มต้นสำหรับกรณีที่ Firestore ยังไม่มีข้อมูล
        const defaultKpiStructure = [
            {
                id: 'stockAccuracy',
                title: 'ความถูกต้องของสต็อกสินค้า',
                type: 'percentage',
                unit: '%',
                details: {
                    indicator: 'เปอร์เซ็นต์ความถูกต้องของสต๊อกสินค้า',
                    frequency: 'ทุกเดือน',
                    evaluation: 'ดูผลการตรวจนับสต็อกสินค้าจากรายงาน KPI ประจำปี (FM-AC-01-03)',
                    levels: [
                        { score: 5, value: '100%', color: 'text-emerald-500' },
                        { score: 4, value: '>98%', color: 'text-green-500' },
                        { score: 3, value: '98%', color: 'text-blue-500' },
                        { score: 2, value: '<98%', color: 'text-amber-500' },
                        { score: 1, value: '<96%', color: 'text-rose-500' } /* Changed to rose-500 */
                    ]
                },
                monthlyData: {
                    '0': { currentValue: 100, target: 98 }, // ม.ค.
                    '1': { currentValue: 100, target: 98 }, // ก.พ.
                    '2': { currentValue: 100, target: 98 }, // มี.ค.
                    '3': { currentValue: 99.34, target: 98 }, // เม.ย.
                    '4': { currentValue: 98.57, target: 98 }, // พ.ค.
                    '5': { currentValue: 0, target: 98 }  // มิ.ย.
                }
            },
            {
                id: 'productCompleteness',
                title: 'ความถูกต้องและสมบูรณ์ของสินค้า',
                type: 'percentage',
                unit: '%',
                details: {
                    indicator: 'เปอร์เซ็นต์ความถูกต้องและสมบูรณ์ของสินค้าที่จัดเตรียมให้ขนส่ง',
                    frequency: 'ทุกเดือน',
                    evaluation: 'ดูจากใบส่งสินค้า/ใบเบิก/ใบจ่ายสินค้าเพื่อจัดส่ง (FM-PL-01-10) แล้วใช้สูตรการคิด [(รายการสินค้าที่ตรวจสอบได้ถูกต้องและสมบูรณ์) ÷ (รายการสินค้าที่จัดเตรียมให้ขนส่ง)] x 100',
                     levels: [
                        { score: 5, value: '100%', color: 'text-emerald-500' },
                        { score: 4, value: '>98%', color: 'text-green-500' },
                        { score: 3, value: '98%', color: 'text-blue-500' },
                        { score: 2, value: '<98%', color: 'text-amber-500' },
                        { score: 1, value: '<96%', color: 'text-rose-500' } /* Changed to rose-500 */
                    ]
                },
                monthlyData: {
                    '0': { currentValue: 100, target: 98 },
                    '1': { currentValue: 100, target: 98 },
                    '2': { currentValue: 99.41, target: 98 },
                    '3': { currentValue: 98.96, target: 98 },
                    '4': { currentValue: 99.46, target: 98 },
                    '5': { currentValue: 0, target: 98 }
                }
            },
            {
                id: 'processErrors',
                title: 'ข้อผิดพลาดในกระบวนการทำงาน',
                type: 'count',
                unit: 'ครั้ง',
                lowerIsBetter: true,
                details: {
                    indicator: 'จำนวนครั้งที่พบผลิตภัณฑ์ที่ไม่เป็นไปตามข้อกำหนด / ข้อผิดพลาดในกระบวนการทำงาน',
                    frequency: 'ทุกเดือน',
                    evaluation: 'ดูจากใบ NCR (FM-QC-01-11), ใบรับสินค้ามีปัญหาจากลูกค้า (FM-WA-01-07), ใบขอบดสินค้ากรณีพบงานมีปัญหา (FM-WA-01-09), CAR (FM-SPVC-01-12) และใบบันทึกข้อผิดพลาดในกระบวนการผลิต (FM-SE-01-01)',
                    levels: [
                        { score: 5, value: '<3 ครั้ง', color: 'text-emerald-500' },
                        { score: 4, value: '3 ครั้ง', color: 'text-green-500' },
                        { score: 3, value: '4 ครั้ง', color: 'text-blue-500' },
                        { score: 2, value: '5 ครั้ง', color: 'text-amber-500' },
                        { score: 1, value: '>5 ครั้ง', color: 'text-rose-500' } /* Changed to rose-500 */
                    ]
                },
                monthlyData: {
                    '0': { currentValue: '-', target: 4 },
                    '1': { currentValue: '-', target: 4 },
                    '2': { currentValue: 4, target: 4 },
                    '3': { currentValue: 3, target: 4 },
                    '4': { currentValue: 3, target: 4 },
                    '5': { currentValue: 0, target: 4 }
                }
            },
            {
                id: 'inspectionReadiness',
                title: 'การเตรียมสินค้าพร้อมตรวจ',
                type: 'percentage',
                unit: '%',
                details: {
                    indicator: 'สินค้าที่ได้รับการตรวจสอบก่อนจัดส่ง',
                    frequency: 'ทุกเดือน',
                    evaluation: 'ดูจากใบส่งสินค้า/ใบเบิก/ใบจ่ายสินค้าเพื่อจัดส่ง (FM-PL-01-10) แล้วใช้สูตรการคิด [(รายการจัดเตรียมสินค้าทั้งหมด) - (จำนวนครั้งที่ไม่ได้ตรวจก่อนจัดส่ง)] ÷ (รายการสินค้าที่จัดส่งทั้งเดือน) x 100',
                     levels: [
                        { score: 5, value: '100%', color: 'text-emerald-500' },
                        { score: 4, value: '>95%', color: 'text-green-500' },
                        { score: 3, value: '95%', color: 'text-blue-500' },
                        { score: 2, value: '<95%', color: 'text-amber-500' },
                        { score: 1, value: '<90%', color: 'text-rose-500' } /* Changed to rose-500 */
                    ]
                },
                 monthlyData: {
                    '0': { currentValue: '-', target: 95 },
                    '1': { currentValue: '-', target: 95 },
                    '2': { currentValue: 98.83, target: 95 },
                    '3': { currentValue: 99.01, target: 95 },
                    '4': { currentValue: 97.88, target: 95 },
                    '5': { currentValue: 0, target: 95 }
                }
            }
        ];

        const riskOpportunityData = [
            {
                id: 'risk1',
                type: 'Risk',
                issue: 'พื้นที่จัดเก็บสินค้าไม่เพียงพอ',
                cause: '(R) พื้นที่ในการจัดเก็บมีไม่เพียงพอหากมีการสั่งซื้อสินค้าจำนวนมากและการจัดส่งขึ้นอยู่กับความต้องการของลูกค้า',
                likelihood_score: 4,
                impact_score: 3,
                level: '',
                mitigation: 'วางแผนการใช้พื้นที่ในการจัดเก็บสินค้าให้มีประสิทธิภาพสูงสุด',
                likelihood_desc: '',
                impact_desc: ''
            },
            {
                id: 'opp1',
                type: 'Opportunity',
                issue: 'พื้นที่จัดเก็บสินค้า',
                cause: '(O) สามารถจัดเก็บสินค้าเพื่อรองรับต่อความต้องการของลูกค้า',
                likelihood_score: 3,
                impact_score: 3,
                level: '',
                mitigation: 'วางแผนการใช้พื้นที่ในการจัดเก็บสินค้าให้มีประสิทธิภาพสูงสุด',
                likelihood_desc: '',
                impact_desc: ''
            },
            {
                id: 'risk2',
                type: 'Risk',
                issue: 'การจัดเก็บสินค้าในอุณหภูมิที่ไม่คงที่',
                cause: '(R) สินค้าบางชนิดอาจเสื่อมสภาพเร็วขึ้น เช่น เปลี่ยนสี เปราะแตก สูญเสียความยืดหยุ่น เสียรูปทรงบิดเบี้ยว',
                likelihood_score: 2,
                impact_score: 2,
                level: '',
                mitigation: 'เลือกจัดเก็บผลิตภัณฑ์ที่ทนต่อการเปลี่ยนแปลงของอุณหภูมิ',
                likelihood_desc: '',
                impact_desc: ''
            },
            {
                id: 'risk3',
                type: 'Risk',
                issue: 'การโยนสินค้าจัดเก็บบนที่สูง',
                cause: '(R) สินค้าอาจเสียหายจากการกระแทกกับสิ่งของในขณะโยนหรือหล่นจากที่สูง',
                likelihood_score: 3,
                impact_score: 3,
                level: '',
                mitigation: 'อบรมผู้ปฏิบัติงานให้มีความรู้และทักษะในการโยนสินค้าอย่างปลอดภัย',
                likelihood_desc: '',
                impact_desc: ''
            },
            {
                id: 'risk4',
                type: 'Risk',
                issue: 'การเคลื่อนย้ายสินค้าบนพื้นที่ต่างระดับ',
                cause: '(R) สินค้าอาจร่วงหล่นในขณะเคลื่อนย้ายสินค้า ลื่นไถลบนพื้นที่ลาดชัน',
                likelihood_score: 3,
                impact_score: 3,
                level: '',
                mitigation: 'อบรมผู้ปฏิบัติงานให้มีความรู้และทักษะในการเคลื่อนย้ายสินค้าอย่างปลอดภัย',
                likelihood_desc: '',
                impact_desc: ''
            }
        ];

        const riskLikelihoodLevels = {
            5: 'สูงมาก: เคยเกิดขึ้นทุกวันหรือเกือบทุกวัน',
            4: 'สูง: เคยเกิดขึ้นทุกสัปดาห์หรือเกือบทุกสัปดาห์',
            3: 'ปานกลาง: เคยเกิดขึ้นทุกเดือนหรือเกือบทุกเดือน',
            2: 'น้อย: เคยเกิดขึ้นทุกปีหรือเกือบทุกปี',
            1: 'น้อยมาก: ไม่เคยเกิดขึ้นในรอบ 5 ปี หรือยังไม่เคยเกิดขึ้น'
        };

        const riskImpactLevels = {
            3: 'มาก: ลูกค้าไม่พึงพอใจ บริษัทฯ มาก / ถูกลูกค้าร้องเรียน / ส่งผลกระทบบริษัทฯ เสียชื่อเสียงมาก / ทำผิดกฎหมาย / ระบบล้มเหลวอย่างสิ้นเชิง / ทรัพย์สินเสียหายจำนวนมาก / กระทบต่อสิ่งแวดล้อมจำนวนมาก / พนักงานเสียชีวิต',
            2: 'ปานกลาง: ความพึงพอใจลูกค้าลดลง / มีแนวโน้ม ที่จะถูกร้องเรียน / มีแนวโน้มจะทำให้ผิดหรือเกือบผิดกฎหมาย / ระบบไม่มีประสิทธิผล / กระทบต่อสิ่งแวดล้อมเล็กน้อย / พนักงาน หรือผู้เกี่ยวข้องบาดเจ็บ ต้องเข้าพักรักษาตัว',
            1: 'น้อย: ระบบไม่ได้ผลตามต้องการหรือล่าช้าไปบ้าง แต่ยังสามารถควบคุมได้'
        };

        const opportunityLikelihoodLevels = {
            5: 'สูงมาก: โอกาสสำเร็จ > 80% หรือภายใน 6 เดือน',
            4: 'สูง: โอกาสสำเร็จ > 50-80% หรือภายใน 6-12 เดือน',
            3: 'ปานกลาง: โอกาสสำเร็จ 50% หรือภายใน 2 ปี',
            2: 'น้อย: โอกาสสำเร็จ < 50-20% หรือภายใน 3-4 ปี',
            1: 'น้อยมาก: โอกาสสำเร็จ < 20% หรือมากกว่า 4 ปี'
        };

        const opportunityImpactLevels = {
            3: 'มาก: ลูกค้าพึงพอใจ บริษัทฯ มาก / ลูกค้าบอกต่อ / ส่งผลกระทบต่อชื่อเสียงของบริษัทฯ ดีขึ้นมาก / ทำให้ระบบฯ มีประสิทธิผลดีขึ้นมาก / ได้กำไรเพิ่มขึ้นเป็นจำนวนมาก / พนักงานมีความสุขในปฏิบัติงานมาก',
            2: 'ปานกลาง: ลูกค้าพึงพอใจ บริษัทฯ เล็กน้อย / ส่งผลกระทบต่อชื่อเสียงของบริษัทฯ ดีขึ้นเล็กน้อย / ทำให้ระบบฯ มีประสิทธิผลดีขึ้นเล็กน้อย / ได้กำไรเพิ่มขึ้นเล็กน้อย / พนักงานมีความสุขในปฏิบัติงานปานกลาง',
            1: 'น้อย: คงทำให้ระบบฯ ได้รับการรับรองต่อเนื่อง / พนักงานมีความสุขในปฏิบัติงานน้อย'
        };

        function calculateLevel(type, likelihood, impact) {
            const score = likelihood * impact;
            if (type === 'Risk') {
                if (score >= 11) return 'สูง';
                if (score >= 6) return 'ปานกลาง';
                return 'ต่ำ';
            } else if (type === 'Opportunity') {
                if (score >= 11) return 'สูง';
                if (score >= 6) return 'ปานกลาง';
                return 'ต่ำ';
            }
            return 'N/A';
        }

        riskOpportunityData.forEach(item => {
            item.level = calculateLevel(item.type, item.likelihood_score, item.impact_score);
            if (item.type === 'Risk') {
                item.likelihood_desc = riskLikelihoodLevels[item.likelihood_score];
                item.impact_desc = riskImpactLevels[item.impact_score];
            } else if (item.type === 'Opportunity') {
                item.likelihood_desc = opportunityLikelihoodLevels[item.likelihood_score];
                item.impact_desc = opportunityImpactLevels[item.impact_score];
            }
        });

        const kpiCharts = {};
        let lineChartInstance = null;
        let roSummaryChartInstance = null;
        let combinedTrendChartInstance = null; // Chart.js instance for combined trend
        let processErrorsTrendChartInstance = null; // New Chart.js instance for process errors trend

        const kpiRiskSection = document.getElementById('kpi-risk-section');
        const combinedTrendSection = document.getElementById('combined-trend-section'); // New section element
        const quizSection = document.getElementById('quiz-section');
        const documentFormsSection = document.getElementById('document-forms-section'); // New section element

        const navKpiRiskBtn = document.getElementById('nav-kpi-risk');
        const navCombinedTrendBtn = document.getElementById('nav-combined-trend'); // New navigation button
        const navQuizBtn = document.getElementById('nav-quiz');
        const navDocumentFormsBtn = document.getElementById('nav-document-forms'); // New navigation button

        const grid = document.getElementById('kpi-grid');
        const modal = document.getElementById('kpi-modal');
        const modalContent = modal.querySelector('.bg-white');
        const modalTitle = document.getElementById('modal-title');
        const modalBody = document.getElementById('modal-body');
        const modalCloseBtn = document.getElementById('modal-close-btn');
        const monthSelect = document.getElementById('month-select');
        const loadingOverlay = document.getElementById('loading-overlay'); 

        const riskOpportunityGrid = document.getElementById('risk-opportunity-grid');
        const roModal = document.getElementById('ro-modal');
        const roModalContent = roModal.querySelector('.bg-white');
        const roModalTitle = document.getElementById('ro-modal-title');
        const roModalBody = document.getElementById('ro-modal-body');
        const roModalCloseBtn = document.getElementById('ro-modal-close-btn');

        // Populate month selector with default data for now since Firebase is commented out
        for (let i = 0; i < 12; i++) {
            const option = document.createElement('option');
            option.value = i;
            option.textContent = monthNames[i];
            monthSelect.appendChild(option);
        }
        const today = new Date();
        const currentMonth = today.getMonth();
        // Use defaultKpiStructure for initial month data if Firebase is not active
        if (defaultKpiStructure[0].monthlyData[currentMonth]) {
            currentMonthIndex = currentMonth;
        } else {
            const availableMonths = Object.keys(defaultKpiStructure[0].monthlyData).map(key => parseInt(key)).sort((a, b) => a - b);
            currentMonthIndex = availableMonths.length > 0 ? availableMonths[availableMonths.length - 1] : 0;
        }
        monthSelect.value = currentMonthIndex;
        loadingOverlay.classList.add('hidden'); // Hide loading overlay immediately if no Firebase

        const wrapLabel = (label, maxCharPerLine = 16) => {
            if (typeof label !== 'string' || label.length <= maxCharPerLine) {
                return label;
            }
            const words = label.split(' ');
            let lines = [];
            let currentLine = '';

            words.forEach(word => {
                if ((currentLine + word).length > maxCharPerLine && currentLine !== '') {
                    lines.push(currentLine.trim());
                    currentLine = word + ' ';
                } else {
                    currentLine += word + ' ';
                }
            });
            lines.push(currentLine.trim());
            return lines;
        };

        const createGaugeChart = (canvasId, value, target, unit) => {
            const ctx = document.getElementById(canvasId);
            if (!ctx) return;
            const max = target > 100 ? target * 1.2 : 100;
            const data = {
                datasets: [{
                    data: [target, max - target],
                    backgroundColor: ['#e0e0e0', '#bdbdbd'],
                    borderWidth: 0,
                    circumference: 180,
                    rotation: 270,
                }, {
                    data: [value, max - value],
                    backgroundColor: [getPerformanceColor(value, target, false), 'rgba(0,0,0,0)'],
                    borderWidth: 0,
                    circumference: 180,
                    rotation: 270,
                }]
            };

            // ทำลาย Chart เก่าก่อนสร้างใหม่ เพื่อป้องกันปัญหา memory leaks
            if (kpiCharts[canvasId]) {
                kpiCharts[canvasId].destroy();
            }

            kpiCharts[canvasId] = new Chart(ctx, {
                type: 'doughnut',
                data: data,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    cutout: '70%',
                    plugins: {
                        tooltip: { enabled: false },
                        legend: { display: false }
                    },
                    animation: {
                       animateRotate: false // แอนิเมชันการเติบโตเท่านั้น ไม่ใช่การหมุน
                    }
                },
                 plugins: [{
                    id: 'textCenter',
                    afterDraw: (chart) => {
                        let ctx = chart.ctx;
                        ctx.save();
                        let centerX = (chart.chartArea.left + chart.chartArea.right) / 2;
                        let centerY = (chart.chartArea.top + chart.chartArea.bottom) / 1.5; // ปรับ Y สำหรับตำแหน่งข้อความ
                        ctx.fillStyle = '#000000'; // Changed to black
                        ctx.textAlign = 'center';
                        ctx.textBaseline = 'baseline';
                        ctx.font = 'bold 2.5rem Sarabun';
                        ctx.fillText(value + unit, centerX, centerY);
                        ctx.font = 'normal 1rem Sarabun';
                        ctx.fillStyle = '#000000'; // Changed to black
                        ctx.fillText(`เป้าหมาย: ${target}${unit}`, centerX, centerY + 24);
                        ctx.restore();
                    }
                }]
            });
        };

        const createSparklineChart = (canvasId, currentValues, targetValues, unit, lineColorForCurrent) => {
            const ctx = document.getElementById(canvasId);
            if (!ctx) return;

            // Destroy existing chart instance if it exists
            if (kpiCharts[canvasId]) {
                kpiCharts[canvasId].destroy();
            }

            const labels = monthNames.slice(Math.max(0, currentMonthIndex - 5), currentMonthIndex + 1); // Last 6 months

            kpiCharts[canvasId] = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'ค่าปัจจุบัน',
                            data: currentValues,
                            borderColor: lineColorForCurrent,
                            backgroundColor: lineColorForCurrent + '40', // Add some transparency for fill
                            borderWidth: 2,
                            pointRadius: 3, // Show points
                            tension: 0.4, // Smooth line
                            fill: true
                        },
                        {
                            label: 'เป้าหมาย',
                            data: targetValues,
                            borderColor: '#14b8a6', // A distinct color for target, e.g., emerald
                            backgroundColor: 'rgba(0,0,0,0)', // No fill for target
                            borderWidth: 1,
                            pointRadius: 0, // No points for target
                            borderDash: [2, 2], // Dashed line for target
                            tension: 0.4,
                            fill: false
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: { display: false },
                        tooltip: { enabled: false }
                    },
                    scales: {
                        x: {
                            display: true, // Show x-axis
                            grid: { display: false }, // Hide grid lines
                            ticks: {
                                font: { size: 8, family: 'Sarabun' },
                                maxRotation: 0,
                                minRotation: 0,
                                color: '#000000' // Black color for ticks
                            }
                        },
                        y: {
                            display: true, // Show y-axis labels
                            grid: { display: false }, // Hide grid lines
                            ticks: {
                                font: { size: 8, family: 'Sarabun' },
                                color: '#000000' // Black color for ticks
                            }
                        }
                    },
                    elements: {
                        line: {
                            borderCapStyle: 'round'
                        }
                    }
                }
            });
        };

        const createLineChart = (canvasId, labels, currentValues, targetValues, unit) => {
            const ctx = document.getElementById(canvasId);
            if (!ctx) return;

            if (lineChartInstance) {
                lineChartInstance.destroy();
            }

            lineChartInstance = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'ค่าปัจจุบัน',
                            data: currentValues,
                            borderColor: '#0284c7', /* Brighter blue for current value line */
                            backgroundColor: 'rgba(2, 132, 199, 0.2)', /* Brighter blue for fill */
                            fill: true,
                            tension: 0.3,
                            pointRadius: 5,
                            pointBackgroundColor: '#0284c7',
                            pointBorderColor: '#fff',
                            pointHoverRadius: 7,
                            pointHoverBackgroundColor: '#0284c7',
                            pointHoverBorderColor: '#fff'
                        },
                        {
                            label: 'เป้าหมาย',
                            data: targetValues,
                            borderColor: '#14b8a6', /* Brighter green for target line */
                            backgroundColor: 'rgba(20, 184, 166, 0.1)', /* Brighter green for fill */
                            fill: false,
                            tension: 0.3,
                            pointRadius: 0,
                            borderDash: [5, 5]
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                            labels: {
                                font: {
                                    family: 'Sarabun',
                                    color: '#000000' // Set legend label color to black
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed.y !== null) {
                                        label += context.parsed.y + unit;
                                    }
                                    return label;
                                }
                            },
                            titleFont: { family: 'Sarabun', size: 14 },
                            bodyFont: { family: 'Sarabun', size: 12 }
                        }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'เดือน',
                                font: { family: 'Sarabun', color: '#000000' } // Set x-axis title color to black
                            },
                            ticks: {
                                font: { family: 'Sarabun', color: '#000000' } // Set x-axis tick color to black
                            }
                        },
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: `ค่า (${unit})`,
                                font: { family: 'Sarabun', color: '#000000' } // Set y-axis title color to black
                            },
                            ticks: {
                                font: { family: 'Sarabun', color: '#000000' } // Set y-axis tick color to black
                            }
                        }
                    }
                }
            });
        };
        
        const getPerformanceColor = (value, target, lowerIsBetter = false) => {
            if (lowerIsBetter) {
                if (value <= target * 0.75) return '#14b8a6'; /* Teal 500 */
                if (value <= target) return '#0284c7'; /* Sky 600 */
                if (value <= target * 1.25) return '#f59e0b'; /* Amber 500 */
                return '#f43f5e'; /* Rose 500 */
            } else {
                if (value >= target) return '#14b8a6'; /* Teal 500 */
                if (value >= target * 0.9) return '#0284c7'; /* Sky 600 */
                if (value >= target * 0.8) return '#f59e0b'; /* Amber 500 */
                return '#f43f5e'; /* Rose 500 */
            }
        };
        
        const getStatusText = (value, target, lowerIsBetter = false) => {
            if (value === 'N/A' || target === 'N/A') return 'ไม่มีข้อมูล';
            if (lowerIsBetter) {
                 if (value <= target) return 'อยู่ในเกณฑ์เป้าหมาย';
                 return 'สูงกว่าเกณฑ์เป้าหมาย';
            } else {
                if (value >= target) return 'บรรลุเป้าหมาย';
                return 'ต่ำกว่าเป้าหมาย';
            }
        }

        const renderKpiCards = (monthIndex) => {
            grid.innerHTML = '';
            for (const chartId in kpiCharts) {
                if (kpiCharts[chartId]) {
                    kpiCharts[chartId].destroy();
                    delete kpiCharts[chartId];
                }
            }

            // Use defaultKpiStructure if kpiDataFromFirestore is empty (e.g., Firebase not active)
            const kpiDataToUse = kpiDataFromFirestore.length > 0 ? kpiDataFromFirestore : defaultKpiStructure;

            kpiDataToUse.forEach(kpi => {
                const monthlyKpi = kpi.monthlyData[monthIndex];
                const prevMonthlyKpi = kpi.monthlyData[monthIndex - 1];

                const currentValue = monthlyKpi ? monthlyKpi.currentValue : 'N/A';
                const targetValue = monthlyKpi ? monthlyKpi.target : 'N/A';

                let changeIndicatorHtml = '';
                if (currentValue !== 'N/A' && prevMonthlyKpi && prevMonthlyKpi.currentValue !== 'N/A' && prevMonthlyKpi.currentValue !== 0) {
                    const change = currentValue - prevMonthlyKpi.currentValue;
                    const percentageChange = (change / prevMonthlyKpi.currentValue) * 100;
                    
                    let arrow = '—';
                    let changeColor = 'text-gray-500';

                    if (change > 0) {
                        arrow = '▲';
                        changeColor = kpi.lowerIsBetter ? 'text-rose-600' : 'text-emerald-600'; // If lower is better, increase is bad (rose). If higher is better, increase is good (emerald).
                    } else if (change < 0) {
                        arrow = '▼';
                        changeColor = kpi.lowerIsBetter ? 'text-emerald-600' : 'text-rose-600'; // If lower is better, decrease is good (emerald). If higher is better, decrease is bad (rose).
                    }

                    changeIndicatorHtml = `<span class="${changeColor} text-shadow-subtle">${Math.abs(percentageChange).toFixed(1)}% ${arrow}</span>`;
                }


                const card = document.createElement('div');
                // Added bg-opacity-75 for transparency
                card.className = 'bg-white bg-opacity-75 rounded-xl shadow-lg p-6 flex flex-col items-center text-center transition-transform duration-300 hover:scale-105';
                
                let vizHtml = '';
                if (kpi.type === 'percentage') {
                    if (currentValue !== 'N/A' && targetValue !== 'N/A') {
                        vizHtml = `<div class="chart-container"><canvas id="${kpi.id}"></canvas></div>`;
                    } else {
                        vizHtml = `<div class="h-[150px] flex flex-col justify-center items-center">
                                         <p class="kpi-value-lg font-bold text-gray-400 text-shadow-subtle">N/A</p>
                                         <p class="text-gray-900 text-lg text-shadow-subtle">${kpi.unit}</p> <!-- Changed to text-gray-900 and added text-shadow-subtle -->
                                         <p class="text-gray-900 text-shadow-subtle">เป้าหมาย: N/A ${kpi.unit}</p> <!-- Changed to text-gray-900 and added text-shadow-subtle -->
                                       </div>`;
                    }
                } else {
                    const colorClass = (currentValue !== 'N/A' && targetValue !== 'N/A') ? getPerformanceColor(currentValue, targetValue, kpi.lowerIsBetter) : 'text-gray-400';
                    vizHtml = `<div class="h-[150px] flex flex-col justify-center items-center">
                                 <p class="kpi-value-lg font-bold text-shadow-subtle" style="color: ${colorClass};">${currentValue}</p>
                                 <p class="text-gray-900 text-lg text-shadow-subtle">${kpi.unit}</p> <!-- Changed to text-gray-900 and added text-shadow-subtle -->
                                 <p class="text-gray-900 text-shadow-subtle">เป้าหมาย: ${kpi.lowerIsBetter ? '≤ ' : ''}${targetValue} ${kpi.unit}</p> <!-- Changed to text-gray-900 and added text-shadow-subtle -->
                               </div>`;
                }

                // Prepare data for sparkline (last 6 months)
                const sparklineCurrentValues = [];
                const sparklineTargetValues = [];
                for (let i = Math.max(0, monthIndex - 5); i <= monthIndex; i++) {
                    sparklineCurrentValues.push(kpi.monthlyData[i] ? kpi.monthlyData[i].currentValue : null);
                    sparklineTargetValues.push(kpi.monthlyData[i] ? kpi.monthlyData[i].target : null);
                }
                const sparklineColor = getPerformanceColor(currentValue, targetValue, kpi.lowerIsBetter);


                card.innerHTML = `
                    <h2 class="text-xl font-bold mb-2 text-black text-shadow-subtle">${kpi.title}</h2>
                    <div class="flex flex-col items-center justify-center mb-4">
                        <div class="flex items-center justify-center mb-1">
                            <p class="text-base text-gray-900 text-shadow-subtle">เดือนปัจจุบัน:</p>
                            <span class="text-gray-900 text-shadow-subtle ml-2">${currentValue} ${kpi.unit}</span>
                        </div>
                        ${changeIndicatorHtml ? `<p class="text-base text-gray-900 text-shadow-subtle">เดือนก่อนหน้า: ${changeIndicatorHtml}</p>` : `<p class="text-base text-gray-900 text-shadow-subtle">เดือนก่อนหน้า: ไม่มีข้อมูล</p>`}
                    </div>
                    ${vizHtml}
                    <div class="sparkline-container">
                        <canvas id="${kpi.id}-sparkline"></canvas>
                    </div>
                    <p class="mt-4 text-gray-900 text-shadow-subtle">${getStatusText(currentValue, targetValue, kpi.lowerIsBetter)}</p>
                    <button data-id="${kpi.id}" class="details-btn mt-6 bg-blue-200 text-blue-800 font-semibold py-2 px-4 rounded-lg hover:bg-blue-300 transition-colors">
                        ดูรายละเอียด
                    </button>
                    <!-- Edit button is removed as Firebase functionality is commented out -->
                `;
                grid.appendChild(card);

                if (kpi.type === 'percentage' && currentValue !== 'N/A' && targetValue !== 'N/A') {
                    setTimeout(() => createGaugeChart(kpi.id, currentValue, targetValue, kpi.unit), 0);
                }
                // Render sparkline for all KPIs
                setTimeout(() => createSparklineChart(kpi.id + '-sparkline', sparklineCurrentValues, sparklineTargetValues, kpi.unit, sparklineColor), 0);
            });

            document.querySelectorAll('.details-btn').forEach(button => {
                button.addEventListener('click', (e) => {
                    const kpiId = e.currentTarget.dataset.id;
                    // Use defaultKpiStructure if kpiDataFromFirestore is empty
                    const kpi = (kpiDataFromFirestore.length > 0 ? kpiDataFromFirestore : defaultKpiStructure).find(k => k.id === kpiId);
                    const monthlyKpi = kpi.monthlyData[currentMonthIndex];

                    const chartLabels = [];
                    const chartCurrentValues = [];
                    const chartTargetValues = [];
                    for (let i = 0; i < 12; i++) {
                        const monthData = kpi.monthlyData[i.toString()];
                        chartLabels.push(monthNames[i]);
                        chartCurrentValues.push(monthData ? monthData.currentValue : null);
                        chartTargetValues.push(monthData ? monthData.target : null);
                    }
                    
                    modalTitle.textContent = kpi.title;
                    modalBody.innerHTML = `
                        <div class="space-y-3">
                            <div>
                                <p class="font-semibold text-gray-900 text-shadow-subtle">ดัชนีชี้วัด:</p> <!-- Changed to text-gray-900 and added text-shadow-subtle -->
                                <p class="text-shadow-subtle">${kpi.details.indicator}</p> <!-- Added text-shadow-subtle -->
                            </div>
                            <div>
                                <p class="font-semibold text-gray-900 text-shadow-subtle">เป้าหมาย:</p> <!-- Changed to text-gray-900 and added text-shadow-subtle -->
                                <p class="text-lg font-bold ${kpi.lowerIsBetter ? 'text-blue-600' : 'text-emerald-600'} text-shadow-subtle">
                                    ${kpi.lowerIsBetter ? 'ไม่เกิน ' : ''}${monthlyKpi ? monthlyKpi.target : 'N/A'} ${kpi.unit}
                                </p>
                            </div>
                            <div>
                                <p class="font-semibold text-gray-900 text-shadow-subtle">ความถี่ในการประเมิน:</p> <!-- Changed to text-gray-900 and added text-shadow-subtle -->
                                <p class="text-shadow-subtle">${kpi.details.frequency}</p> <!-- Added text-shadow-subtle -->
                            </div>
                             <div>
                                <p class="font-semibold text-gray-900 text-shadow-subtle">วิธีการประเมิน:</p> <!-- Changed to text-gray-900 and added text-shadow-subtle -->
                                <p class="text-sm text-shadow-subtle">${kpi.details.evaluation}</p> <!-- Added text-shadow-subtle -->
                            </div>
                            <div>
                                <p class="font-semibold text-gray-900 text-shadow-subtle">เกณฑ์การให้คะแนน:</p> <!-- Changed to text-gray-900 and added text-shadow-subtle -->
                                <ul class="list-none space-y-1 mt-1">
                                    ${kpi.details.levels.map(l => `
                                        <li class="flex items-center justify-between p-2 rounded-md bg-gray-50">
                                            <span class="font-semibold ${l.color} text-shadow-subtle">ระดับ ${l.score}</span>
                                            <span class="text-shadow-subtle">${l.value}</span>
                                        </li>
                                    `).join('')}
                                </ul>
                            </div>
                            <div class="mt-6">
                                <h3 class="text-xl font-semibold mb-3 text-black text-shadow-subtle">แนวโน้มรายเดือน</h3> <!-- Changed to text-black and added text-shadow-subtle -->
                                <div class="chart-container-line">
                                    <canvas id="kpiLineChart"></canvas>
                                </div>
                            </div>
                        </div>
                    `;

                    modal.classList.remove('hidden');
                    setTimeout(() => {
                        modalContent.classList.remove('scale-95', 'opacity-0');
                        modalContent.classList.add('scale-100', 'opacity-100');
                        // Ensure createLineChart is called after modal is visible and canvas is rendered
                        const kpiLineChartCanvas = document.getElementById('kpiLineChart');
                        if (kpiLineChartCanvas) {
                            createLineChart('kpiLineChart', chartLabels, chartCurrentValues, chartTargetValues, kpi.unit);
                        }
                    }, 10);
                });
            });

            // Edit Data Modal is no longer functional without Firebase
            // document.querySelectorAll('.edit-btn').forEach(button => {
            //     button.addEventListener('click', (e) => {
            //         const kpiId = e.currentTarget.dataset.id;
            //         const kpi = kpiDataFromFirestore.find(k => k.id === kpiId);
            //         const monthlyKpi = kpi.monthlyData[currentMonthIndex];

            //         editKpiIdInput.value = kpiId;
            //         editMonthIndexInput.value = currentMonthIndex;
            //         editCurrentValueInput.value = monthlyKpi ? monthlyKpi.currentValue : '';
            //         editTargetValueInput.value = monthlyKpi ? monthlyKpi.target : '';
                    
            //         editModalTitle.textContent = `แก้ไขข้อมูล ${kpi.title} (${monthNames[currentMonthIndex]})`;
            //         saveStatusMessage.classList.add('hidden'); // ซ่อนข้อความสถานะก่อนหน้า

            //         editKpiModal.classList.remove('hidden');
            //         setTimeout(() => {
            //             editModalContent.classList.remove('scale-95', 'opacity-0');
            //             editModalContent.classList.add('scale-100', 'opacity-100');
            //         }, 10);
            //     });
            // });
        };

        const closeModal = () => {
            modalContent.classList.remove('scale-100', 'opacity-100');
            modalContent.classList.add('scale-95', 'opacity-0');
            setTimeout(() => {
                modal.classList.add('hidden');
                if (lineChartInstance) {
                    lineChartInstance.destroy();
                    lineChartInstance = null;
                }
            }, 300);
        };

        const closeRoModal = () => {
            roModalContent.classList.remove('scale-100', 'opacity-100');
            roModalContent.classList.add('scale-95', 'opacity-0');
            setTimeout(() => roModal.classList.add('hidden'), 300);
        };

        modalCloseBtn.addEventListener('click', closeModal);
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeModal();
            }
        });

        roModalCloseBtn.addEventListener('click', closeRoModal);
        roModal.addEventListener('click', (e) => {
            if (e.target === roModal) {
                closeRoModal();
            }
        });

        // Save KPI Data (commented out as Firebase is not active)
        // saveKpiDataBtn.addEventListener('click', async () => {
        //     const kpiId = editKpiIdInput.value;
        //     const monthIndex = editMonthIndexInput.value;
        //     const newCurrentValue = parseFloat(editCurrentValueInput.value);
        //     const newTargetValue = parseFloat(editTargetValueInput.value);

        //     if (isNaN(newCurrentValue) || isNaN(newTargetValue)) {
        //         saveStatusMessage.textContent = 'กรุณากรอกข้อมูลให้ครบถ้วนและเป็นตัวเลข';
        //         saveStatusMessage.className = 'text-center text-sm mt-2 text-red-600';
        //         saveStatusMessage.classList.remove('hidden');
        //         return;
        //     }

        //     try {
        //         const kpiRef = doc(db, `artifacts/${appIdForFirestore}/users/${userId}/kpi_data`, kpiId);
                
        //         const kpiToUpdate = kpiDataFromFirestore.find(k => k.id === kpiId);
        //         if (!kpiToUpdate) {
        //             throw new Error("ไม่พบ KPI ในข้อมูลท้องถิ่น");
        //         }

        //         const updatedMonthlyData = { ...kpiToUpdate.monthlyData };
        //         updatedMonthlyData[monthIndex] = {
        //             currentValue: newCurrentValue,
        //             target: newTargetValue
        //         };

        //         await setDoc(kpiRef, { monthlyData: updatedMonthlyData }, { merge: true });

        //         saveStatusMessage.textContent = 'บันทึกข้อมูลสำเร็จ!';
        //         saveStatusMessage.className = 'text-center text-sm mt-2 text-emerald-600';
        //         saveStatusMessage.classList.remove('hidden');
        //         setTimeout(closeEditModal, 1000);
        //     } catch (error) {
        //         console.error("Error saving KPI data:", error);
        //         saveStatusMessage.textContent = `เกิดข้อผิดพลาดในการบันทึกข้อมูล: ${error.message}`;
        //         saveStatusMessage.className = 'text-center text-sm mt-2 text-red-600';
        //         saveStatusMessage.classList.remove('hidden');
        //     }
        // });

        const renderRiskOpportunityCards = () => {
            riskOpportunityGrid.innerHTML = '';
            riskOpportunityData.forEach(item => {
                const card = document.createElement('div');
                const typeColor = item.type === 'Risk' ? 'bg-rose-100' : 'bg-emerald-100'; /* Brighter colors */
                const textColor = item.type === 'Risk' ? 'text-rose-700' : 'text-emerald-700'; /* Brighter colors */
                const levelColor = item.level === 'สูง' ? 'text-rose-600' : (item.level === 'ปานกลาง' ? 'text-amber-600' : 'text-emerald-600'); /* Brighter colors */

                // Changed to bg-opacity-75 for transparency
                card.className = `bg-white bg-opacity-75 rounded-xl shadow-lg p-6 flex flex-col items-center text-center transition-transform duration-300 hover:scale-105 ${typeColor}`;
                card.innerHTML = `
                    <div class="text-lg font-bold mb-2 ${textColor} text-shadow-subtle">${item.type === 'Risk' ? 'ความเสี่ยง' : 'โอกาส'}</div> <!-- Added text-shadow-subtle -->
                    <h3 class="text-xl font-bold mb-3 text-black text-shadow-subtle">${item.issue}</h3> <!-- Changed to text-black and added text-shadow-subtle -->
                    <p class="text-2xl font-bold ${levelColor} mb-4 text-shadow-subtle">ระดับ: ${item.level}</p> <!-- Added text-shadow-subtle -->
                    <button data-id="${item.id}" class="ro-details-btn mt-4 bg-blue-500 text-white font-semibold py-2 px-4 rounded-lg hover:bg-blue-600 transition-colors">
                        ดูรายละเอียด
                    </button>
                `;
                riskOpportunityGrid.appendChild(card);
            });

            document.querySelectorAll('.ro-details-btn').forEach(button => {
                button.addEventListener('click', (e) => {
                    const itemId = e.currentTarget.dataset.id;
                    const item = riskOpportunityData.find(d => d.id === itemId);

                    roModalTitle.textContent = `${item.type === 'Risk' ? 'รายละเอียดความเสี่ยง' : 'รายละเอียดโอกาส'}: ${item.issue}`;
                    roModalBody.innerHTML = `
                        <div class="space-y-3">
                            <div>
                                <p class="font-semibold text-gray-900 text-shadow-subtle">ประเด็น:</p> <!-- Changed to text-gray-900 and added text-shadow-subtle -->
                                <p class="text-shadow-subtle">${item.issue}</p> <!-- Added text-shadow-subtle -->
                            </div>
                            <div>
                                <p class="font-semibold text-gray-900 text-shadow-subtle">สาเหตุ:</p> <!-- Changed to text-gray-900 and added text-shadow-subtle -->
                                <p class="text-shadow-subtle">${item.cause}</p> <!-- Added text-shadow-subtle -->
                            </div>
                            <div>
                                <p class="font-semibold text-gray-900 text-shadow-subtle">โอกาสที่จะเกิดขึ้น (ระดับ ${item.likelihood_score}):</p> <!-- Changed to text-gray-900 and added text-shadow-subtle -->
                                <p class="text-shadow-subtle">${item.likelihood_desc}</p> <!-- Added text-shadow-subtle -->
                            </div>
                            <div>
                                <p class="font-semibold text-gray-900 text-shadow-subtle">ผลกระทบ (ระดับ ${item.impact_score}):</p> <!-- Changed to text-gray-900 and added text-shadow-subtle -->
                                <p class="text-shadow-subtle">${item.impact_desc}</p> <!-- Added text-shadow-subtle -->
                            </div>
                            <div>
                                <p class="font-semibold text-gray-900 text-shadow-subtle">ระดับ ${item.type === 'Risk' ? 'ความเสี่ยง' : 'โอกาส'}:</p> <!-- Changed to text-gray-900 and added text-shadow-subtle -->
                                <p class="text-xl font-bold ${item.level === 'สูง' ? 'text-rose-600' : (item.level === 'ปานกลาง' ? 'text-amber-600' : 'text-emerald-600')} text-shadow-subtle">${item.level}</p> <!-- Added text-shadow-subtle -->
                            </div>
                            <div>
                                <p class="font-semibold text-gray-900 text-shadow-subtle">มาตรการ:</p> <!-- Changed to text-gray-900 and added text-shadow-subtle -->
                                <p class="text-shadow-subtle">${item.mitigation}</p> <!-- Added text-shadow-subtle -->
                            </div>
                        </div>
                    `;

                    roModal.classList.remove('hidden');
                    setTimeout(() => {
                        roModalContent.classList.remove('scale-95', 'opacity-0');
                        roModalContent.classList.add('scale-100', 'opacity-100');
                    }, 10);
                });
            });
        };

        const renderRiskOpportunitySummaryChart = () => {
            const risksByLevel = { 'ต่ำ': [], 'ปานกลาง': [], 'สูง': [] };
            const opportunitiesByLevel = { 'ต่ำ': [], 'ปานกลาง': [], 'สูง': [] };

            riskOpportunityData.forEach(item => {
                if (item.type === 'Risk') {
                    risksByLevel[item.level].push(item.issue);
                } else if (item.type === 'Opportunity') {
                    opportunitiesByLevel[item.level].push(item.issue);
                }
            });

            const labels = ['ต่ำ', 'ปานกลาง', 'สูง'];
            const riskCounts = labels.map(level => risksByLevel[level].length);
            const opportunityCounts = labels.map(level => opportunitiesByLevel[level].length);

            const ctx = document.getElementById('riskOpportunitySummaryChart').getContext('2d');
            if (roSummaryChartInstance) {
                roSummaryChartInstance.destroy();
            }

            roSummaryChartInstance = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'ความเสี่ยง',
                            data: riskCounts,
                            backgroundColor: '#f43f5e', /* Rose 500 */
                            borderColor: '#f43f5e',
                            borderWidth: 1
                        },
                        {
                            label: 'โอกาส',
                            data: opportunityCounts,
                            backgroundColor: '#10b981', /* Emerald 500 */
                            borderColor: '#10b981',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                            labels: {
                                font: {
                                    family: 'Sarabun',
                                    color: '#000000' // Set legend label color to black
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                title: function(tooltipItems) {
                                    const item = tooltipItems[0];
                                    return item.dataset.label + " - " + item.label;
                                },
                                label: function(context) {
                                    return '';
                                },
                                afterBody: function(tooltipItems) {
                                    const item = tooltipItems[0];
                                    const datasetLabel = item.dataset.label;
                                    const level = item.label;
                                    
                                    let issues = [];
                                    if (datasetLabel === 'ความเสี่ยง') {
                                        issues = risksByLevel[level];
                                    } else if (datasetLabel === 'โอกาส') {
                                        issues = opportunitiesByLevel[level];
                                    }

                                    if (issues.length > 0) {
                                        return issues.map(issue => `- ${issue}`);
                                    }
                                    return [];
                                }
                            },
                            titleFont: { family: 'Sarabun', size: 16 },
                            bodyFont: { family: 'Sarabun', size: 14 }
                        }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'ระดับ',
                                font: { family: 'Sarabun', color: '#000000' } // Set x-axis title color to black
                            },
                            ticks: {
                                font: { family: 'Sarabun', color: '#000000' } // Set x-axis tick color to black
                            }
                        },
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'จำนวน',
                                font: { family: 'Sarabun', color: '#000000' } // Set y-axis title color to black
                            },
                            ticks: {
                                stepSize: 1,
                                font: { family: 'Sarabun', color: '#000000' } // Set y-axis tick color to black
                            }
                        }
                    }
                }
            });
        };

        const renderCombinedTrendSummaryChart = () => {
            const combinedCtx = document.getElementById('combinedTrendChart');
            const processErrorsCtx = document.getElementById('processErrorsTrendChart');

            if (!combinedCtx || !processErrorsCtx) return;

            if (combinedTrendChartInstance) {
                combinedTrendChartInstance.destroy();
            }
            if (processErrorsTrendChartInstance) {
                processErrorsTrendChartInstance.destroy();
            }

            // Use defaultKpiStructure if kpiDataFromFirestore is empty
            const kpiDataToUse = kpiDataFromFirestore.length > 0 ? kpiDataFromFirestore : defaultKpiStructure;

            // Separate Process Errors KPI
            const processErrorsKpi = kpiDataToUse.find(kpi => kpi.id === 'processErrors');
            const otherKpis = kpiDataToUse.filter(kpi => kpi.id !== 'processErrors');

            // --- Render Combined Trend Chart for Other KPIs ---
            const otherKpiDatasets = otherKpis.map((kpi, index) => {
                const currentValues = [];
                for (let i = 0; i < 12; i++) {
                    const monthData = kpi.monthlyData[i.toString()];
                    currentValues.push(monthData ? monthData.currentValue : null);
                }

                // Define a set of distinct colors for each KPI line
                const colors = [
                    '#0284c7', // Sky Blue
                    '#14b8a6', // Teal
                    '#f59e0b', // Amber
                    '#8b5cf6', // Violet
                    '#ec4899', // Pink
                    '#22c55e', // Green
                    '#eab308'  // Yellow
                ];
                const lineColor = colors[index % colors.length];

                return {
                    label: kpi.title + ' (ค่าปัจจุบัน)',
                    data: currentValues,
                    borderColor: lineColor,
                    backgroundColor: lineColor + '20', // Light transparent fill
                    fill: false,
                    tension: 0.3,
                    pointRadius: 3,
                    pointBackgroundColor: lineColor,
                    pointBorderColor: '#fff',
                    pointHoverRadius: 5
                };
            });

            combinedTrendChartInstance = new Chart(combinedCtx, {
                type: 'line',
                data: {
                    labels: monthNames,
                    datasets: otherKpiDatasets
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'top',
                            labels: {
                                font: {
                                    family: 'Sarabun',
                                    color: '#000000' // Set legend label color to black
                                }
                            }
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed.y !== null) {
                                        // Find the corresponding KPI to get its unit
                                        const kpiTitle = label.substring(0, label.indexOf('(')).trim();
                                        const kpi = otherKpis.find(k => k.title === kpiTitle);
                                        label += context.parsed.y + (kpi ? kpi.unit : '');
                                    }
                                    return label;
                                }
                            },
                            titleFont: { family: 'Sarabun', size: 14 },
                            bodyFont: { family: 'Sarabun', size: 12 }
                        }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'เดือน',
                                font: { family: 'Sarabun', color: '#000000' } // Set x-axis title color to black
                            },
                            ticks: {
                                font: { family: 'Sarabun', color: '#000000' } // Set x-axis tick color to black
                            }
                        },
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'ค่า',
                                font: { family: 'Sarabun', color: '#000000' } // Set y-axis title color to black
                            },
                            ticks: {
                                font: { family: 'Sarabun', color: '#000000' } // Set y-axis tick color to black
                            }
                        }
                    }
                }
            });

            // --- Render Process Errors Trend Chart ---
            if (processErrorsKpi) {
                const processErrorsCurrentValues = [];
                const processErrorsTargetValues = [];
                for (let i = 0; i < 12; i++) {
                    const monthData = processErrorsKpi.monthlyData[i.toString()];
                    processErrorsCurrentValues.push(monthData ? monthData.currentValue : null);
                    processErrorsTargetValues.push(monthData ? processErrorsKpi.target : null); // Assuming target is static for now, or fetch from monthlyData if it varies.
                }

                processErrorsTrendChartInstance = new Chart(processErrorsCtx, {
                    type: 'line',
                    data: {
                        labels: monthNames,
                        datasets: [
                            {
                                label: processErrorsKpi.title + ' (ค่าปัจจุบัน)',
                                data: processErrorsCurrentValues,
                                borderColor: '#ef4444', // Red for errors
                                backgroundColor: '#ef4444' + '20',
                                fill: true, // Fill area for errors might be good
                                tension: 0.3,
                                pointRadius: 3,
                                pointBackgroundColor: '#ef4444',
                                pointBorderColor: '#fff',
                                pointHoverRadius: 5
                            },
                            {
                                label: processErrorsKpi.title + ' (เป้าหมาย)',
                                data: processErrorsTargetValues,
                                borderColor: '#14b8a6', // Teal for target
                                backgroundColor: 'rgba(0,0,0,0)',
                                fill: false,
                                tension: 0.3,
                                pointRadius: 0,
                                borderDash: [5, 5]
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'top',
                                labels: {
                                    font: {
                                        family: 'Sarabun',
                                        color: '#000000'
                                    }
                                }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        let label = context.dataset.label || '';
                                        if (label) {
                                            label += ': ';
                                        }
                                        if (context.parsed.y !== null) {
                                            label += context.parsed.y + processErrorsKpi.unit;
                                        }
                                        return label;
                                    }
                                },
                                titleFont: { family: 'Sarabun', size: 14 },
                                bodyFont: { family: 'Sarabun', size: 12 }
                            }
                        },
                        scales: {
                            x: {
                                title: {
                                    display: true,
                                    text: 'เดือน',
                                    font: { family: 'Sarabun', color: '#000000' }
                                },
                                ticks: {
                                    font: { family: 'Sarabun', color: '#000000' }
                                }
                            },
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: `ค่า (${processErrorsKpi.unit})`,
                                    font: { family: 'Sarabun', color: '#000000' }
                                },
                                ticks: {
                                    stepSize: 1, // Assuming error counts are integers
                                    font: { family: 'Sarabun', color: '#000000' }
                                }
                            }
                        }
                    }
                });
            }
        };

        // Function to open quiz in a popup
        const openQuizPopup = (url) => {
            const width = 800; // กำหนดความกว้างของหน้าต่างป๊อปอัป
            const height = 600; // กำหนดความสูงของหน้าต่างป๊อปอัป
            const left = (window.innerWidth / 2) - (width / 2);
            const top = (window.innerHeight / 2) - (height / 2);
            window.open(url, '_blank', `width=${width},height=${height},top=${top},left=${left},resizable=yes,scrollbars=yes`);
        };

        // Navigation logic
        const activateNavButton = (buttonId) => {
            document.querySelectorAll('nav button').forEach(btn => {
                btn.classList.remove('bg-blue-300', 'text-blue-900');
                btn.classList.add('bg-blue-100', 'text-blue-700');
            });
            document.getElementById(buttonId).classList.remove('bg-blue-100', 'text-blue-700');
            document.getElementById(buttonId).classList.add('bg-blue-300', 'text-blue-900');
        };

        navKpiRiskBtn.addEventListener('click', () => {
            kpiRiskSection.classList.remove('section-hidden');
            combinedTrendSection.classList.add('section-hidden');
            quizSection.classList.add('section-hidden');
            documentFormsSection.classList.add('section-hidden');
            activateNavButton('nav-kpi-risk');
        });

        navCombinedTrendBtn.addEventListener('click', () => {
            kpiRiskSection.classList.add('section-hidden');
            combinedTrendSection.classList.remove('section-hidden');
            quizSection.classList.add('section-hidden');
            documentFormsSection.classList.add('section-hidden');
            activateNavButton('nav-combined-trend');
            renderCombinedTrendSummaryChart(); // Render when navigating to this section
        });

        navQuizBtn.addEventListener('click', () => {
            kpiRiskSection.classList.add('section-hidden');
            combinedTrendSection.classList.add('section-hidden');
            quizSection.classList.remove('section-hidden');
            documentFormsSection.classList.add('section-hidden');
            activateNavButton('nav-quiz');
        });

        // New navigation button event listener
        navDocumentFormsBtn.addEventListener('click', () => {
            kpiRiskSection.classList.add('section-hidden');
            combinedTrendSection.classList.add('section-hidden');
            quizSection.classList.add('section-hidden');
            documentFormsSection.classList.remove('section-hidden');
            activateNavButton('nav-document-forms');
        });

        // Activate initial button
        // Initial render (moved inside DOMContentLoaded)
        document.addEventListener('DOMContentLoaded', () => {
            renderKpiCards(currentMonthIndex);
            renderRiskOpportunityCards();
            renderRiskOpportunitySummaryChart();
            // renderCombinedTrendSummaryChart(); // This will be called when the navigation button is clicked

            activateNavButton('nav-kpi-risk');

            monthSelect.addEventListener('change', (e) => {
                currentMonthIndex = parseInt(e.target.value);
                renderKpiCards(currentMonthIndex);
            });

            // Add event listeners for quiz buttons
            document.querySelectorAll('.quiz-button').forEach(button => {
                button.addEventListener('click', (e) => {
                    const quizUrl = e.currentTarget.dataset.quizUrl;
                    openQuizPopup(quizUrl);
                });
            });
        });

        // Firebase initialization is commented out as per the provided context.
        // If Firebase is needed, uncomment initFirebase() and ensure firebaseConfig is correctly set.
        // initFirebase(); // This line was causing the ReferenceError as initFirebase was not defined in this scope.
    </script>

</body>
</html>
